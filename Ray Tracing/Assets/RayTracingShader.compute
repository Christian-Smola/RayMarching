//Based on the following article by David Kuri
//http://blog.three-eyed-games.com/2018/05/03/gpu-ray-tracing-in-unity-part-1/

#pragma kernel CSMain

RWTexture2D<float4> Result;

float _Seed;
float2 _Pixel;
float2 _PixelOffset;
float4 _DirectionalLight;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float EPSILON = 1e-8;
static const float PI = 3.14159265;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit
{
    
    float distance;
    float smoothness;
    float3 albedo;
    float3 emission;
    float3 normal;
    float3 position;
    float3 specular;
};

struct Sphere
{
    float radius;
    float smoothness;
    float3 albedo;
    float3 emission;
    float3 position;
    float3 specular;
};

StructuredBuffer<Sphere> _Spheres;

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

RayHit CreateRayHit()
{
    RayHit hit;
    
    hit.distance = 1.#INF;
    hit.smoothness = 0.0f;
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

float SmoothnessToPhongAlpha(float s)
{
    return pow(1000.0f, s * s);
}

float3x3 GetTangentSpace(float3 normal)
{
    //Choose helper Vector for the cross product
    float3 helper = float3(1, 0, 0);

    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));

    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha)
{
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 TangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    return mul(TangentSpaceDir, GetTangentSpace(normal));
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    float t = -ray.origin.y / ray.direction.y;

    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.smoothness = 1.0f;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = float3(0.4f, 0.4f, 0.6f);
        bestHit.emission = float3(0.0f, 0.0f, 0.0f);
        bestHit.specular = float3(0.3f, 0.3f, 0.3f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;

    if (p2sqr < 0)
        return;

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;

    if (t > 0 && bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.smoothness = sphere.smoothness;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.emission = sphere.emission;
        bestHit.specular = sphere.specular;
    }
}

//Credit to Tomas Akenine-Moller and Ben Trumbore
bool IntersectTriangle(Ray ray, float3 VertA, float3 VertB, float3 VertC, inout float t, inout float u, inout float v)
{
    //Find vectors for two edges sharing VertA
    float3 LineAB = VertB - VertA;
    float3 LineAC = VertC - VertA;

    //begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.direction, LineAC);

    //if determinant is near zero, ray lies in plane of triangle
    float Determinant = dot(LineAB, pvec);

    //use backface culling
    if (Determinant < EPSILON)
        return false;

    float InvertedDeterminant = 1.0f / Determinant;

    //Calculate distance from VertA to ray origin
    float3 tvec = ray.origin - VertA;

    //Calculate u and test bounds
    u = dot(tvec, pvec) * InvertedDeterminant;

    if (u < 0.0 || u > 1.0f)
        return false;

    float3 qvec = cross(tvec, LineAB);

    //Calculate v and test bounds
    v = dot(ray.direction, qvec) * InvertedDeterminant;

    if (v < 0.0 || u + v > 1.0f)
        return false;

    //Calculate t, ray intersects triangle
    t = dot(LineAC, qvec) * InvertedDeterminant;

    return true;
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();

    uint numSpheres, stride;

    _Spheres.GetDimensions(numSpheres, stride);

    for (uint i = 0; i < numSpheres; i++)
        IntersectSphere(ray, bestHit, _Spheres[i]);

    IntersectGroundPlane(ray, bestHit);

    float3 VertA = float3(-150, 0, -150);
    float3 VertB = float3(150, 0, -150);
    float3 VertC = float3(0, 150 * sqrt(2), -150);

    float t, u, v;
    if (IntersectTriangle(ray, VertA, VertB, VertC, t, u, v))
    {
        if (t > 0 && t < bestHit.distance) {
            bestHit.distance = t; 
            //Unable to calculate position using barycentric coords, might be a cause for concern
            bestHit.position = ray.origin + t * ray.direction;
            bestHit.normal = normalize(cross(VertB - VertA, VertC - VertA));
            bestHit.albedo = 0.00f;
            bestHit.specular = 0.65f * float3(1, 0.4f, 0.2f);
            bestHit.smoothness = 0.9f;
            bestHit.emission = 0.0f;
        }
    }
    
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        hit.albedo = min(1.0f - hit.specular, hit.albedo);
        float SpecChance = energy(hit.specular);
        float DiffChance = energy(hit.albedo);

        float roulette = rand();

        if (roulette < SpecChance)
        {
            //Specular reflection
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.energy *= (1.0f / SpecChance) * hit.specular * sdot(hit.normal, ray.direction, f);

            return hit.emission;
        }
        else if (DiffChance > 0 && roulette < SpecChance + DiffChance)
        {
            //Diffuse reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / DiffChance) * hit.albedo;
        }
        else
        {
            ray.energy = 0.0f;
        }

        return hit.emission;
    }
    else
    {
        ray.energy = 0.0f;

        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    _Pixel = id.xy;

    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);

    float3 result = float3(0, 0, 0);

    for (int x = 0; x < 8; x++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
            break;
    }

    Result[id.xy] = float4(result, 1);
}
